#!/usr/bin/python3
"""
This module consists of the base class of the AirBnB_clone project
created on Mon Nov, 21 2022

@author: Maurice Haro

"""
import uuid
import datetime
from datetime import datetime


class BaseModel:
    """
    BaseModel: Manages the common instance attributes and methods

    Attributes:
        id: the unique id of an objecte generated by uuid4()
        created_at: the specific time when an object was created
        updated_at: the specific time when an object was updated
    """
    def __init__(self, *args, **kwargs):
        """
        initializing the class instance attributes

        Args:
            id (str): the uniq id of the object
            created_at (datetime): the time an object was created
            updated_at (datetime): the time an object was updated
        """
        from models import storage
        self.id = str(uuid.uuid4())
        self.created_at = datetime.now()
        self.updated_at = datetime.now()

        if len(kwargs) == 0:
            storage.new(self)

        else:
            for key, value in kwargs.items():
                if key != '__class__':
                    if key in ['created_at', 'updated_at']:
                        if type(value) == str:
                            value = datetime.strptime(
                                    value, '%Y-%m-%dT%H:%M:%S.%f')
                        else:
                            if key == 'created_at':
                                value = self.created_at
                            elif key == 'updated_at':
                                value = self.updated_at

                    if key == 'id':
                        value = str(value)
                    setattr(self, key, value)

                if key == 'id':
                    existing = storage.all()
                    id_str = self.__class__.__name__ + '.' + str(value)
                    if id_str not in existing.keys():
                        storage.new(self)

    def __str__(self):
        """
        override the __str__ method to print in given format

        returns:
            formated string representation
        """
        my_str = "[{:s}] (:s{}) {:s}".format(
                self.__class__.__name__, self.id, str(self.__dict__))
        return my_str

    def save(self):
        """
        updates the instance attribute updated_at with the current datetime:
        """
        from models import storage
        self.updated_at = datetime.now()
        storage.save()

    def to_dict(self):
        """
        returns a dictionary containing key/values of __dict__ of the instance
        """
        new_dict = {key: value for key, value in self.__dict__.items()}
        new_dict['__class__'] = self.__class__.__name__
        new_dict['created_at'] = self.created_at.isoformat()
        new_dict['updated_at'] = self.updated_at.isoformat()
        return new_dict
